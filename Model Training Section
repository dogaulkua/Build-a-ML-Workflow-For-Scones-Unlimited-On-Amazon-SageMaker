# Model Training Section - Complete Code

import sagemaker
from sagemaker import image_uris
import boto3

# Get the latest image classification algorithm image
algo_image = image_uris.retrieve('image-classification', boto3.Session().region_name)

# Define S3 output location
s3_output_location = f"s3://{bucket}/models/image_model"

# Create the estimator
img_classifier_model = sagemaker.estimator.Estimator(
    image_uri=algo_image,
    role=role,  # Your SageMaker execution role
    instance_count=1,
    instance_type='ml.p3.2xlarge',
    output_path=s3_output_location,
    sagemaker_session=sagemaker.Session()
)

# Set hyperparameters for CIFAR dataset (bicycles vs motorcycles)
img_classifier_model.set_hyperparameters(
    image_shape='3,32,32',  # CIFAR images are 32x32 with 3 channels (RGB)
    num_classes=2,          # Binary classification: bicycle vs motorcycle
    num_training_samples=800  # Approximate number based on 1000 total samples
)

# Model inputs are already defined in the document
model_inputs = {
    "train": sagemaker.inputs.TrainingInput(
        s3_data=f"s3://{bucket}/train/",
        content_type="application/x-image"
    ),
    "validation": sagemaker.inputs.TrainingInput(
        s3_data=f"s3://{bucket}/test/",
        content_type="application/x-image"
    ),
    "train_lst": sagemaker.inputs.TrainingInput(
        s3_data=f"s3://{bucket}/train.lst",
        content_type="application/x-image"
    ),
    "validation_lst": sagemaker.inputs.TrainingInput(
        s3_data=f"s3://{bucket}/test.lst",
        content_type="application/x-image"
    )
}

# Train the model
img_classifier_model.fit(model_inputs)

# Configure Model Monitor Data Capture
from sagemaker.model_monitor import DataCaptureConfig

data_capture_config = DataCaptureConfig(
    enable_capture=True,
    sampling_percentage=100,
    destination_s3_uri=f"s3://{bucket}/data_capture"
)

# Deploy the model
deployment = img_classifier_model.deploy(
    initial_instance_count=1,
    instance_type='ml.m5.xlarge',
    data_capture_config=data_capture_config
)

endpoint = deployment.endpoint_name
print(f"Endpoint name: {endpoint}")

# Create predictor
from sagemaker.predictor import Predictor
predictor = Predictor(endpoint_name=endpoint)

# Make inference
from sagemaker.serializers import IdentitySerializer
import base64

predictor.serializer = IdentitySerializer("image/png")
with open("./test/bicycle_s_001789.png", "rb") as f:
    payload = f.read()

inference = predictor.predict(payload)
print(f"Inference result: {inference}")
